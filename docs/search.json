[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 Devin Judge-Lord Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/articles/vignette.html","id":"using-the-netlit-r-package","dir":"Articles","previous_headings":"","what":"Using the netlit R Package","title":"netlit Vignette","text":"netlit package provides functions generate network statistics literature review. Specifically, netlit provides wrapper igraph functions facilitate using network analysis literature reviews. Install package install netlit CRAN, run following:","code":"devtools::install_github(\"judgelord/netlit\") install.packages(\"netlit\")"},{"path":"/articles/vignette.html","id":"basic-usage","dir":"Articles","previous_headings":"Using the netlit R Package","what":"Basic Usage","title":"netlit Vignette","text":"review() function takes dataframe, data, includes columns (directed graph structure). example , use example data project redistricting. data set related concepts () redistricting literature citations relationships (cites cites_empirical). See vignette(\"netlit\") details example. netlit offers four main functions: make_edgelist(), make_nodelist(), augment_nodelist(), review(). review() primary function. others helper functions perform individual steps review() . review() takes dataframe least two columns representing linked concepts (e.g., cause effect) returns data augmented network statistics. Users must either specify “” nodes “” nodes arguments include columns named supplied data object. review() returns list three objects: augmented edgelist (list relationships edge_betweenness calculated), augmented nodelist (list concepts degree betweenness calculated), graph object suitable use igraph functions network visualization packages. Users may wish include edge attributes (e.g., information relationship two concepts) node attributes (information concept). show . first, consider basic use review(): Edge node attributes can added using edge_attributes node_attributes arguments. edge_attributes vector identifies columns supplied data frame user like retain. node_attributes separate dataframe contains attributes node primary data set. example node_attributes data include one column type indicating type node/variable/concept. Tip: retain variables literature, use edge_attributes = names(literature).","code":"library(netlit)  data(\"literature\")  literature %>% kable() lit <- review(literature, from = \"from\", to = \"to\")  lit ## A netlit_review object with the following components: ##  ## $edgelist ##  - 69 edges ##  - edge attributes: edge_betweenness ## $nodelist ##  - 56 nodes ##  - node attributes: degree_in, degree_out, degree_total, betweenness ## $graph ##    an igraph object edges <- lit$edgelist  edges %>%  kable() nodes <- lit$nodelist  nodes %>%  kable() data(\"node_attributes\")  node_attributes %>%  kable() lit <- review(literature,               edge_attributes = c(\"cites\", \"cites_empirical\"),               node_attributes = node_attributes)  lit ## A netlit_review object with the following components: ##  ## $edgelist ##  - 69 edges ##  - edge attributes: cites, cites_empirical, edge_betweenness ## $nodelist ##  - 56 nodes ##  - node attributes: type, degree_in, degree_out, degree_total, betweenness ## $graph ##    an igraph object"},{"path":"/articles/vignette.html","id":"more-advanced-uses-larger-networks-visualizating-your-network-network-descriptives","dir":"Articles","previous_headings":"Using the netlit R Package","what":"More Advanced Uses: larger networks, visualizating your network, network descriptives","title":"netlit Vignette","text":"separated multiple cites theorized relationship semicolons. Let’s count total number citations number citations empirical work splitting cite measuring length vector. Now use review() expanded edgelist, including variables literature data edge_attributes = names(literature).","code":"library(tidyverse) library(magrittr) library(ggraph) # count cites  literature %<>%    group_by(to, from) %>%    mutate(cite_weight = str_split(cites, \";\")[[1]]  %>% length(),          cite_weight_empirical = str_split(cites_empirical, \";\",)[[1]] %>% length(),          cite_weight_empirical = ifelse(is.na(cites_empirical), 0, cite_weight_empirical)) %>%    ungroup()   # subsets  literature %<>% mutate(communities_node = str_c(to, from) %>% str_detect(\"Commun\"),                        confound = case_when(       from == \"Preserve\\nCommunities\\nOf Interest\" & to == \"Rolloff\" ~ T,       from == \"Voter\\nInformation\\nAbout Their\\nDistrict\" & to == \"Rolloff\" ~ T,       from == \"Preserve\\nCommunities\\nOf Interest\"              & to == \"Voter\\nInformation\\nAbout Their\\nDistrict\" ~ T,       T ~ F),               empirical = ifelse(!is.na(cites_empirical),                                  \"Empirical work\",                                   \"No empirical work\")) # now with all node and edge attributes  lit <- review(literature,               edge_attributes = names(literature),               node_attributes = node_attributes               )  edges <- lit$edgelist  edges %>% kable() nodes <- lit$nodelist  nodes %>%  kable()"},{"path":"/articles/vignette.html","id":"the-igraph-object","dir":"Articles","previous_headings":"Using the netlit R Package > More Advanced Uses: larger networks, visualizating your network, network descriptives","what":"The igraph object","title":"netlit Vignette","text":"mean? D means directed N means named graph W means weighted graph name (v/c) means name node attribute ’s character cite_weight (e/n) means cite_weight edge attribute ’s numeric","code":"# define igraph object as g g <- lit$graph  g ## IGRAPH 2273929 DN-B 56 69 --  ## + attr: name (v/c), type (v/c), degree_in (v/n), degree_out (v/n), ## | degree_total (v/n), betweenness (v/n), cites (e/c), cites_empirical ## | (e/c), cite_weight (e/n), cite_weight_empirical (e/n), ## | communities_node (e/l), confound (e/l), empirical (e/c), ## | edge_betweenness (e/n) ## + edges from 2273929 (vertex names): ## [1] Computers                        ->Detect\\nGerrymandering             ## [2] Computers                        ->Public\\nParticipation              ## [3] Number Of\\nCompetitive\\nDistricts->Preserve\\nCommunities\\nOf Interest ## [4] Partisan\\nAdvantage              ->Proportionality                    ## + ... omitted several edges"},{"path":"/articles/vignette.html","id":"with-ggraph","dir":"Articles","previous_headings":"Using the netlit R Package","what":"With ggraph","title":"netlit Vignette","text":"can also plot using package ggraph package plot igraph object. package allows us plot self-ties, slightly difficult use ggplot features (e.g. colors legend labels) compared ggnetwork.","code":"# best seed 1,4, *5* set.seed(5)  p <- ggraph(g, layout = 'fr') +    geom_node_point(     aes(color = degree_total %>% as.factor() ),     size = 6,      alpha = .7     ) +    geom_edge_arc2(     aes(       start_cap = circle(3, 'mm'),       end_cap = circle(6, 'mm'),       color = cite_weight %>% as_factor(),       linetype = empirical       ),     curvature = 0,     arrow = arrow(length = unit(2, 'mm'),                    type = \"open\")     ) +   geom_edge_loop(       aes( color = cite_weight %>% as_factor(),       start_cap = circle(5, 'mm'),       end_cap = circle(2, 'mm'),       linetype = empirical       ),       n = 300,       strength = .6,     arrow = arrow(length = unit(2, 'mm'),                    type = \"open\")     ) +   geom_node_text( aes(label = name), size = 2.3) +    ggplot2::theme_void() +    theme(legend.position=\"bottom\") +    labs(edge_color = \"Number of\\nPublications\",        color = \"Total Degree\\nCentrality\",        edge_linetype = \"\") +  scale_edge_color_viridis(discrete = TRUE,                          option = \"plasma\",                           begin = 0,                           end = .9,                           direction = -1) +   scale_color_viridis_d(option = \"mako\",                          begin = 1,                          end = .5)  p"},{"path":"/articles/vignette.html","id":"subgraphs","dir":"Articles","previous_headings":"Using the netlit R Package > With ggraph","what":"Subgraphs","title":"netlit Vignette","text":"","code":"p + facet_wrap(\"communities_node\") p + facet_wrap(\"confound\")"},{"path":"/articles/vignette.html","id":"betweenness","dir":"Articles","previous_headings":"Using the netlit R Package > With ggraph","what":"Betweenness","title":"netlit Vignette","text":"Edge Betweenness  Node Betweenness","code":"ggraph(g, layout = 'fr') +    geom_node_point(size = 10,                    alpha = .1) +    theme_void() +    theme(legend.position=\"bottom\"         ) +    scale_color_viridis_c(begin = .5,                          end = 1,                          direction = -1,                          option = \"cividis\") +  scale_edge_color_viridis(begin = 0.2,                           end = .9,                           direction = -1,                           option = \"cividis\")  +       geom_edge_arc2(     aes(     start_cap = circle(3, 'mm'),     end_cap = circle(5, 'mm'),     color = edge_betweenness,     linetype = empirical     ),     curvature = .1,     arrow = arrow(length = unit(2, 'mm'),                    type = \"closed\")) +      geom_edge_loop(aes(color = edge_betweenness))  +   geom_node_text(aes(label = name),                   size = 2.3) +    labs(edge_color = \"Edge Betweenness\",        color = \"Node Betweenness\",        edge_linetype = \"\") p <- ggraph(g, layout = 'fr') +    geom_node_point(     aes(color = betweenness),     size = 6,      alpha = .7     ) +    geom_edge_arc2(     aes(       start_cap = circle(3, 'mm'),       end_cap = circle(6, 'mm'),       color = cite_weight %>% as_factor(),       linetype = empirical       ),     curvature = 0,     arrow = arrow(length = unit(2, 'mm'),                    type = \"open\")     ) +   geom_edge_loop(       aes( color = cite_weight %>% as_factor(),       start_cap = circle(5, 'mm'),       end_cap = circle(2, 'mm'),       linetype = empirical       ),       n = 300,       strength = .6,     arrow = arrow(length = unit(2, 'mm'),                    type = \"open\")     ) +   geom_node_text(aes(label = name),                    size = 2.3) +    theme_void() +    theme(legend.position=\"bottom\") +    labs(edge_color = \"Number of\\nPublications\",        color = \"Betweeneness\",        edge_linetype = \"\") +  scale_edge_color_viridis(discrete = TRUE,                          option = \"plasma\",                           begin = 0,                           end = .9,                           direction = -1) +   scale_color_gradient2()  p ggraph(g, layout = 'fr') +    geom_node_point(aes(color = betweenness),                   size = 10,                    alpha = 1) +    theme_void() +    theme(legend.position=\"bottom\") +   scale_color_viridis_c(begin = .5,                         end = 1,                         direction = -1,                         option = \"cividis\") +  scale_edge_color_viridis(begin = 0.2,                           end = .9,                           direction = -1,                           option = \"cividis\")  +       geom_edge_arc2(     aes(     start_cap = circle(3, 'mm'),     end_cap = circle(5, 'mm'),     color = edge_betweenness,     linetype = empirical     ),     curvature = .1,     arrow = arrow(length = unit(2, 'mm'),                    type = \"closed\")) +      geom_edge_loop(aes(color = edge_betweenness)) +   labs(edge_color = \"Edge Betweenness\",        color = \"Node Betweenness\",        edge_linetype = \"\") +    geom_node_text(aes(label = name),                   size = 2.3)"},{"path":"/articles/vignette.html","id":"degree","dir":"Articles","previous_headings":"Using the netlit R Package > With ggraph","what":"Degree","title":"netlit Vignette","text":"","code":"ggraph(g, layout = 'fr') +    geom_node_point(aes(color = degree_total),                   size = 10,                    alpha = 1) +    theme_void() +    theme(legend.position=\"bottom\"        ) +    scale_color_gradient2() +  scale_edge_color_viridis(begin = 0.2,                           end = .9,                           direction = -1,                           option = \"cividis\")  +       geom_edge_arc2(     aes(     start_cap = circle(3, 'mm'),     end_cap = circle(5, 'mm'),     color = edge_betweenness,     linetype = empirical     ),     curvature = .1,     arrow = arrow(length = unit(2, 'mm'),                    type = \"closed\")) +      geom_edge_loop(aes(color = edge_betweenness)) +   labs(edge_color = \"Edge Betweenness\",        color = \"Total Degree\",        edge_linetype = \"\") +    geom_node_text(aes(label = name),                   size = 2.3)"},{"path":"/articles/vignette.html","id":"about-the-example-data","dir":"Articles","previous_headings":"","what":"About the example data","title":"netlit Vignette","text":"Articles chosen according specific selection criteria. first identified articles published since 2010 either 1) published one eight high-ranking journals 2) gained least 50 citations according Google Scholar. chose articles contained four possible key terms title abstract.","code":"# Journal articles in example data data(\"literature_metadata\")  literature_metadata %>% kable() # count publications per journal pub_table <- literature_metadata %>%    filter(str_detect(paste(literature$cites, collapse = \"|\"), Author)) %>%    count(Publication, name = \"Articles\") %>%   mutate(Publication = case_when(     Publication == \"AJPS\" ~ \"American Journal of Political Science\",     Publication == \"APSR\" ~ \"American Political Science Review\",     Publication == \"BJPS\" ~ \"British Journal of Political Science\",     Publication == \"JOP\" ~ \"The Journal of Politics\",     Publication == \"NCL Review\" ~ \"North Carolina Law Review\",     Publication == \"QJPS\" ~ \"Quarterly Journal of Political Science\",     TRUE ~ Publication   ))   pub_table %>% kable()"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Devin Judge-Lord. Author, maintainer. Noah Greifer. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Judge-Lord D, Greifer N (2022). netlit: Augment literature review network analysis statistics. R package version 0.0.0.9000.","code":"@Manual{,   title = {netlit: Augment a literature review with network analysis statistics},   author = {Devin Judge-Lord and Noah Greifer},   year = {2022},   note = {R package version 0.0.0.9000}, }"},{"path":"/index.html","id":"-netlit-augment-a-literature-review-with-network-analysis-statistics","dir":"","previous_headings":"","what":"# netlit: Augment a literature review with network analysis statistics","title":"Augment a literature review with network analysis statistics","text":"netlit provides functions generate network statistics literature review. Specifically, processes dataset row proposed relationship (“edges”) two concepts variables (“nodes”). install netlit CRAN, run following:","code":"install.packages(\"netlit\")"},{"path":"/index.html","id":"basic-usage","dir":"","previous_headings":"","what":"Basic Usage","title":"Augment a literature review with network analysis statistics","text":"review() function takes dataframe, data, includes columns (directed graph structure). example , use example data project redistricting. data set related concepts () redistricting literature citations relationships (cites cites_empirical). See vignette(\"netlit\") details example. netlit offers four functions: make_edgelist(), make_nodelist(), augment_nodelist(), review(). review() primary function (probably one need). others helper functions perform individual steps review() . review() takes dataframe least two columns representing linked concepts (e.g., cause effect) returns data augmented network statistics. Users must either specify “” nodes “” nodes arguments include columns named supplied data object. review() returns list three objects: augmented edgelist (list relationships edge_betweenness calculated), augmented nodelist (list concepts degree betweenness calculated), graph object suitable use igraph functions network visualization packages.","code":"library(netlit)  data(\"literature\")  names(literature) #> [1] \"to\"              \"from\"            \"cites\"           \"cites_empirical\""},{"path":"/index.html","id":"including-node-attributes","dir":"","previous_headings":"Basic Usage","what":"Including node attributes","title":"Augment a literature review with network analysis statistics","text":"Users may wish include edge attributes (e.g., information relationship two concepts) node attributes (information concept). show . first, consider basic use review(): Edge node attributes can added using edge_attributes node_attributes arguments. edge_attributes vector identifies columns supplied data frame user like retain. (retain variables literature, use edge_attributes = names(literature).) node_attributes separate dataframe contains attributes node primary data set. node_attributes must dataframe column node values matching columns data argument. example node_attributes data include one column type indicating type node/variable/concept.","code":"lit <- review(literature, from = \"from\", to = \"to\")  lit #> A netlit_review object with the following components: #>  #> $edgelist #>  - 69 edges #>  - edge attributes: edge_betweenness #> $nodelist #>  - 56 nodes #>  - node attributes: degree_in, degree_out, degree_total, betweenness #> $graph #>    an igraph object head(lit$edgelist) #>                               from                               to edge_betweenness #> 1                        computers            detect gerrymandering              2.0 #> 2                        computers             public participation              1.0 #> 3  number of competitive districts preserve communities of interest             86.0 #> 4               partisan advantage                  proportionality             19.5 #> 5          partisan gerrymandering                   efficiency gap             13.5 #> 6 preserve communities of interest              constitutional test              7.0 head(lit$nodelist) #>                               node degree_in degree_out degree_total betweenness #> 1                        computers         0          2            2         0.0 #> 2  number of competitive districts         1          2            3        64.0 #> 3               partisan advantage         6          8           14       111.5 #> 4          partisan gerrymandering         1          7            8        42.0 #> 5 preserve communities of interest         2          6            8        79.0 #> 6      mean-median vote comparison         0          2            2         0.0 data(\"node_attributes\")  head(node_attributes) #>                                node      type #> 1      campaign resource allocation    effect #> 2                 candidate quality    effect #> 3 change in constituency boundaries condition #> 4  preserve communities of interest      goal #> 5                   competitiveness      goal #> 6                         computers condition lit <- review(literature,               edge_attributes = c(\"cites\", \"cites_empirical\"),               node_attributes = node_attributes)  lit #> A netlit_review object with the following components: #>  #> $edgelist #>  - 69 edges #>  - edge attributes: cites, cites_empirical, edge_betweenness #> $nodelist #>  - 56 nodes #>  - node attributes: type, degree_in, degree_out, degree_total, betweenness #> $graph #>    an igraph object head(lit$edgelist) #>                               from                               to                                                                               cites              cites_empirical edge_betweenness #> 1                        computers            detect gerrymandering Altman & McDonald 2010; Wang 2016; Altman & McDonald 2011; Ramachandran & Gold 2018                    Wang 2016              2.0 #> 2                        computers             public participation                                      Altman & McDonald 2010; Altman & McDonald 2011                         <NA>              1.0 #> 3  number of competitive districts preserve communities of interest                                                        Gimpel & Harbridge-Yong 2020 Gimpel & Harbridge-Yong 2020             86.0 #> 4               partisan advantage                  proportionality                                                     Caughey et al. 2017; Tamas 2019                         <NA>             19.5 #> 5          partisan gerrymandering                   efficiency gap                                                                           Chen 2017                    Chen 2017             13.5 #> 6 preserve communities of interest              constitutional test                                                                 Stephanopoulos 2012                         <NA>              7.0 head(lit$nodelist) #>                               node      type degree_in degree_out degree_total betweenness #> 1                        computers condition         0          2            2         0.0 #> 2  number of competitive districts      goal         1          2            3        64.0 #> 3               partisan advantage      goal         6          8           14       111.5 #> 4          partisan gerrymandering condition         1          7            8        42.0 #> 5 preserve communities of interest      goal         2          6            8        79.0 #> 6      mean-median vote comparison    metric         0          2            2         0.0"},{"path":"/reference/augment_nodelist.html","id":null,"dir":"Reference","previous_headings":"","what":"Augment a node list with graph-based node attributes — augment_nodelist","title":"Augment a node list with graph-based node attributes — augment_nodelist","text":"augment_nodelist() augments supplied node list adding graph-based measures node attributes.","code":""},{"path":"/reference/augment_nodelist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Augment a node list with graph-based node attributes — augment_nodelist","text":"","code":"augment_nodelist(nodelist, edgelist = NULL, graph = NULL)"},{"path":"/reference/augment_nodelist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Augment a node list with graph-based node attributes — augment_nodelist","text":"nodelist \"netlit_nodelist\" object, output call make_nodelist. edgelist optional; \"netlit_edgelist\" object, output call make_edgelist. graph igraph object; output call igraph::graph_from_data_frame(edgelist).","code":""},{"path":"/reference/augment_nodelist.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Augment a node list with graph-based node attributes — augment_nodelist","text":"edgelist graph supplied, \"degree\" node attribute added, resulting igraph::degree(graph, mode = \"\"). (graph supplied edgelist , igraph::graph_from_data_frame() run edgelist first.) case, \"betweenness\" attribute added, resulting igraph::betweenness.","code":""},{"path":"/reference/augment_nodelist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Augment a node list with graph-based node attributes — augment_nodelist","text":"argument supplied ndoelist one two columns added. edgelist graph supplied, \"degree\" column added. case, \"betweenness\" column added.","code":""},{"path":[]},{"path":"/reference/augment_nodelist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Augment a node list with graph-based node attributes — augment_nodelist","text":"","code":"data(\"literature\") data(\"node_attributes\")  nodelist <- make_nodelist(literature,                           node_attributes = node_attributes)  edgelist <- make_edgelist(literature,                           edge_attributes = c(\"cites\", \"cites_empirical\"))  nodelist_augmented <- augment_nodelist(nodelist,                                        edgelist = edgelist)  str(nodelist_augmented) #> Classes ‘netlit_nodelist’ and 'data.frame':\t56 obs. of  6 variables: #>  $ node        : chr  \"computers\" \"number of competitive districts\" \"partisan advantage\" \"partisan gerrymandering\" ... #>  $ type        : chr  \"condition\" \"goal\" \"goal\" \"condition\" ... #>  $ degree_in   : num  0 1 6 1 2 0 0 0 0 2 ... #>  $ degree_out  : num  2 2 8 7 6 2 3 6 6 1 ... #>  $ degree_total: num  2 3 14 8 8 2 3 6 6 3 ... #>  $ betweenness : num  0 64 112 42 79 ... #>  - attr(*, \"node\")= chr \"node\"  if (FALSE) { #Same results: graph <- igraph::graph_frm_data_from(edgelist) nodelist_augmented <- augment_nodelist(nodelist,                                        graph = graph) }"},{"path":"/reference/literature.html","id":null,"dir":"Reference","previous_headings":"","what":"Studies on redistricting — literature","title":"Studies on redistricting — literature","text":"dataset containing relationships concepts identified redistricting literature.","code":""},{"path":"/reference/literature.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Studies on redistricting — literature","text":"","code":"data(\"literature\")"},{"path":"/reference/literature.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Studies on redistricting — literature","text":"data frame 69 observations following 10 variables. core logical vector character vector edge character vector character vector cites_pre2010 character vector cites character vector cites_empirical character vector mechanism character vector cite_weight numeric vector cite_empirical_weight numeric vector","code":""},{"path":[]},{"path":"/reference/literature.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Studies on redistricting — literature","text":"https://github.com/judgelord/redistricting-lit","code":""},{"path":"/reference/literature.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Studies on redistricting — literature","text":"","code":"data(literature)"},{"path":"/reference/make_edgelist.html","id":null,"dir":"Reference","previous_headings":"","what":"Make edgelist — make_edgelist","title":"Make edgelist — make_edgelist","text":"make_edgelist makes edge list supplied data frame. edge list data frame \"\" column, \"\" column, , optionally, columns containing edge attributes, row directed edge.","code":""},{"path":"/reference/make_edgelist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make edgelist — make_edgelist","text":"","code":"make_edgelist(data, edge_attributes = NULL,               from = \"from\", to = \"to\")"},{"path":"/reference/make_edgelist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make edgelist — make_edgelist","text":"data data set \"\" column \"\" column, row represents directed edge. (See arguments columns names \"\" \"\".) edge_attributes optional character vector names columns data containing edge attributes. name column data considered \"\" column, ie., representing nodes directed edges emanate. Default \"\". name column data considered \"\" column, ie., representing nodes directed edges point. Default \"\".","code":""},{"path":"/reference/make_edgelist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make edgelist — make_edgelist","text":"netlit_edglist object, data frame identical data except following: missing values removed (warning present data) , , edge_attributes columns retained, columns first two columns added column \"edge_betweenness\" present containing edge betweennesses edge attribute \"edge_attributes\" contain values supplied edge_attributes, ","code":""},{"path":"/reference/make_edgelist.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Make edgelist — make_edgelist","text":"make_edgelist() creates pared version data containing , , edge_attributes columns, added \"edge_betweenness\" column containing edge betweennesses produced igraph::edge_betweenness().","code":""},{"path":[]},{"path":"/reference/make_edgelist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make edgelist — make_edgelist","text":"","code":"data(\"literature\")  edgelist <- make_edgelist(literature,                           edge_attributes = c(\"mechanism\", \"cites\")) #> Error in pare_edgelist(data, edge_attributes): All values supplied to 'edge_attributes' must be names of columns in the supplied dataset. #> Value(s) not in the dataset:\tmechanism  str(edgelist) #> Error in str(edgelist): object 'edgelist' not found"},{"path":"/reference/make_nodelist.html","id":null,"dir":"Reference","previous_headings":"","what":"Make nodelist — make_nodelist","title":"Make nodelist — make_nodelist","text":"make_nodelist() makes node list \"\" \"\" columns supplied data frame. node list data frame \"node\" column , optionally, columns node attributes, row node.","code":""},{"path":"/reference/make_nodelist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make nodelist — make_nodelist","text":"","code":"make_nodelist(data, node_attributes = NULL,               from = \"from\", to = \"to\",               node = \"node\")"},{"path":"/reference/make_nodelist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make nodelist — make_nodelist","text":"data data set \"\" column \"\" column, row represents directed edge. (See arguments columns names \"\" \"\".) node_attributes optional data frame \"node\" column columns node attributes, row represents node. (See node argument column name \"node\".) name column data considered \"\" column, ie., representing nodes directed edges emanate. Default \"\". name column data considered \"\" column, ie., representing nodes directed edges point. Default \"\". node name column node_attributes considered \"node\" column contains names nodes. Default \"node\".","code":""},{"path":"/reference/make_nodelist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make nodelist — make_nodelist","text":"netlit_nodelist object, data frame node column containing names nodes present data. node_attributes supplied, additional columns node attributes present. \"node\" attribute contains name \"node\" column returned object, always first column.","code":""},{"path":[]},{"path":"/reference/make_nodelist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make nodelist — make_nodelist","text":"","code":"data(\"literature\") data(\"node_attributes\")  nodelist <- make_nodelist(literature,                           node_attributes = node_attributes)  str(nodelist) #> Classes ‘netlit_nodelist’ and 'data.frame':\t56 obs. of  2 variables: #>  $ node: chr  \"computers\" \"number of competitive districts\" \"partisan advantage\" \"partisan gerrymandering\" ... #>  $ type: chr  \"condition\" \"goal\" \"goal\" \"condition\" ... #>  - attr(*, \"node\")= chr \"node\""},{"path":"/reference/node_attributes.html","id":null,"dir":"Reference","previous_headings":"","what":"Attributes of redistricting concepts — node_attributes","title":"Attributes of redistricting concepts — node_attributes","text":"dataset \"type\"\" concept named \"\" \"\" columns literature dataset.","code":""},{"path":"/reference/node_attributes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Attributes of redistricting concepts — node_attributes","text":"","code":"data(\"node_attributes\")"},{"path":"/reference/node_attributes.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Attributes of redistricting concepts — node_attributes","text":"data frame 108 observations following 2 variables. node character vector type character vector","code":""},{"path":[]},{"path":[]},{"path":[]},{"path":"/reference/node_attributes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Attributes of redistricting concepts — node_attributes","text":"","code":"data(\"node_attributes\")"},{"path":"/reference/review.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an edgelist and nodelist augmented with igraph network statisitics — review","title":"Create an edgelist and nodelist augmented with igraph network statisitics — review","text":"Processes dataframe (edgelist) adding network statistics producing nodelist igraph graph object use subsequent analysis.","code":""},{"path":"/reference/review.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an edgelist and nodelist augmented with igraph network statisitics — review","text":"","code":"review(data, edge_attributes = NULL,        node_attributes = NULL, from = \"from\",        to = \"to\", node = \"node\")"},{"path":"/reference/review.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an edgelist and nodelist augmented with igraph network statisitics — review","text":"data data set \"\" column \"\" column, row represents directed edge. (See arguments columns names \"\" \"\".) edge_attributes optional character vector names columns data containing edge attributes. Specified columns retained augmented edgelist. Others dropped. See make_edgelist. node_attributes optional data frame columns \"node\" well node attributes. Node attribute names may edge attribute names. See make_nodelist name column data considered \"\" column, ie., representing nodes directed edges emanate. Default \"\". name column data considered \"\" column, ie., representing nodes directed edges point. Default \"\". node name column node_attributes considered \"node\" column contains names nodes. names correspond node names \"\" \"\" columns main data.  Default \"node\".","code":""},{"path":"/reference/review.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an edgelist and nodelist augmented with igraph network statisitics — review","text":"netlit_review object, contains three elements: edgelist edge list selected edge attributes edge_betweenness column added nodelist node list included node attributes degree_in, degree_out,  degree_total betweenness columns added graph igraph graph object created edgelist nodelist print method reports basic summaries object.","code":""},{"path":"/reference/review.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create an edgelist and nodelist augmented with igraph network statisitics — review","text":"review() performs tasks make_edgelist, make_nodelist, augment_nodelist one step. First, creates pared version data containing , , edge_attributes columns, added \"edge_betweenness\" column containing edge betweennesses produced igraph::edge_betweenness(). Next, creates node list merging attrbiutes unique nodes present data. Next, augments node list adding \"degree\" column resulting igraph::degree mode = \"\" \"betweenness\" column resulting igraph::betweenness. Finally, produces graph edge list node list using igraph::graph_from_data_frame. last step can performed individually using netlit functions mentioned .","code":""},{"path":[]},{"path":"/reference/review.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an edgelist and nodelist augmented with igraph network statisitics — review","text":"","code":"data(\"literature\") lit <- review(literature) lit #> A netlit_review object with the following components: #>  #> $edgelist #>  - 69 edges #>  - edge attributes: edge_betweenness #> $nodelist #>  - 56 nodes #>  - node attributes: degree_in, degree_out, degree_total, betweenness #> $graph #>    an igraph object  data(\"node_attribites\") #> Warning: data set ‘node_attribites’ not found lit <- review(literature,               edge_attributes = c(\"cites\", \"cites_empirical\"),               node_attributes = node_attributes) lit #> A netlit_review object with the following components: #>  #> $edgelist #>  - 69 edges #>  - edge attributes: cites, cites_empirical, edge_betweenness #> $nodelist #>  - 56 nodes #>  - node attributes: type, degree_in, degree_out, degree_total, betweenness #> $graph #>    an igraph object"}]
